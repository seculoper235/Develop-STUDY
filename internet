인터넷은 어떻게 작동되는가?
- 인터넷이란 개념은 굉장히 넓습니다. 때문에 정확히 "이거야!"라고 정의 내리기엔 애매합니다.
무엇으로 정의하더라도 그것보다 더 넓은 개념이 인터넷이기 때문이죠.
그럼에도 굳이 정의해보자면, 인터넷이란 사용자들이 서로 소통할 수 있는 시스템 자체라고 할 수 있습니다.
A가 B랑 카톡을 주고받고, C는 쇼핑을 하고 등등 이런 작업들을 할 수 있게 하는 시스템이 바로 인터넷입니다.

그럼 이제 인터넷이 뭔지는 알았는데, 과연 어떻게 통신이 가능할까요?
여러가지 모델이 있겠지만, 그 중 가장 많이 쓰이고 유명한 모델 중 하나가 바로 클라이언트-서버 모델입니다.
이 모델은 말 그대로 단순하게 서버와 클라이언트가 서로 데이터를 주고받으며 통신하는 모델입니다.
하지만 이런 모델은 그냥 생겨난게 아닙니다. 컴퓨터 답게 역시 프로그램이 필요합니다.
사용자가 사용할 클라이언트 프로그램과 관리자가 사용할 서버 프로그램, 이 두 프로그램이 작동하며 서로 데이터를 주고받는 것이죠.
이 개념은 사실 모두가 이미 알고있습니다.
게임 다운 받았다 할 때의 그 게임 프로그램을 클라이언트 프로그램, 겜 서버 이상해, 렉걸렸나봐!할 때의 서버가 바로 서버 프로그램입니다.

여기서 궁금한 건, 우리는 흔히 네이버, 구글 이런것들을 웹서버라고 부릅니다. 당연히 서버 프로그램이겠죠.
그렇다면 이에 대응하는 클라이언트 프로그램도 있을텐데, 이건 도대체 뭘까요?
우리가 웹을 사용하기 위해 무의식 중에 실행하는 것, 바로 브라우저입니다.


브라우저란 무엇이고, 어떻게 작동하는가?
이제 이 브라우저에 대해 이야기해 볼텐데, 이는 굉장히 복잡하고 폭넓은 지식을 요구합니다.
각 브라우저마다 지니는 렌더링 엔진과 기능도 다르고, 파싱의 원리 등등 파고들면 끝도 없이 많습니다.
하지만 브라우저는 클라이언트를 개발한다면 꼭 알아야 할 기본 지식입니다.
그 이유는 브라우저는 사파리, 파리어폭스, 크롬, IE, 오페라 등 여러개가 있고, 개발자들은 이러한 브라우저를 고려하여 개발해야 하기 때문입니다.
그리고 자바스크립트는 렌더링 엔진과 밀접하게 연관되어 있기에, 이를 이해하기 위해서라도 필요합니다.
그러나 다행히도 모든 브라우저 프로그램은 흐름 그 자체는 동일하게 흘러갑니다.
여기서는 그것에 대해 개략적으로 알아보도록 하겠습니다.

구성 요소나 세부 사항을 알아보기 전에 어떤 기능이 필요할지 먼저 생각해봅시다.
우선 당연히 서버와 통신을 해야하니 통신 부분이 필요할 것이고,브라우저도 프로그램 이므로 나름의 기능이 담긴 사용자 인터페이스 부분이 필요합니다.
우리가 보는 화면을 그려주는 기능도 필요할 것이고, 자바 스크립트도 사용할 수 있어야 하니 인터프리터도 필요하겠네요.
그리고 사용자의 계정 정보나 쿠키, 세션 등이 저장되는 저장소도 필요합니다.
이런 필요성에 보자면 다음과 같이 나눠져 있다고 볼 수 있습니다.

User Interface
- 앞서 말한 브라우저 자체에 내장된 기능(설정, 북마크, 확장 기능 등)같은 사용자 인터페이스를 의미합니다.

** Rendering Engine **
- HTML이나 CSS, JS 등의 파일을 읽고 화면을 그려주는 역할을 합니다. 각 브라우저마다 다르며, 자바스크립트를 할 때 중요하게 다뤄지는 부분입니다.

UI Backend
- Rendering Engine은 렌더 트리를 제작해줍니다. 그리고 그것을 화면에 그려주는 역할을 하는, 진짜 그려주는 아이는 바로 UI Backend 입니다.

Browser Engine
- 사용자 인터페이스에서 뭔가 실행된다고 해서, Rendering Engine과 UI Backend가 화면을 그려줄 순 없습니다. 서로간의 연결고리가 있어야 제대로 표현될 수 있죠.
바로 그 부분은 담당하는 엔진으로, User Interface에서 "너 이거 그려!"라고 Rendering Engine에게 전달합니다.
즉, 브라우저 동작에 대한 비즈니스 로직이 담겨있는 핵심 부분이라고 보면 됩니다.

Networking
- 이름 그대로 통신하기 위해 꼭 필요한 구성요소 입니다.
당연히 브라우저도 HTTP 요청을 한다거나 등의 통신이 필요하기 때문입니다.

JS Engine
- 흔히 "HTML/CSS/JS는 메모장에 작성해서 갖다 붙여도 잘 돌아간다"라고 하죠.
- 자바스크립트를 사용할 때, 별도의 인터프리터가 없어도 잘 실행되는 이유가 이 때문입니다.
- 브라우저 자체에 이미 JS 엔진이 있기 때문에 알아서 해석하고 실행됩니다.

Data Storage
- 쿠키나 세션 정보, 사용 기록 등의 클라이언트 정보가 담기는 공간입니다.
Local Storage, Session Storage 등이 이에 해당합니다.



** 렌더링 엔진이란? **
- HTML/CSS를 읽음으로써 UI Backend가 화면을 그릴 수 있도록, 렌더 트리를 구성하는 엔진입니다.




HTTP 란?
이번에는 브라우저의 구조 중, 네트워킹에 대해 알아볼 것입니다.
브라우저와 서버는 아까 통신을 한다고 했는데, 과연 어떤 방법으로 통신을 할까요? 그것을 정의한 것이 바로 HTTP 입니다.
HTTP란 Hyper Text Transfer Protocol의 약자로, 하이퍼 텍스트 즉, 데이터를 교환할 수 있는 통신 규약입니다.

우선 하이퍼 텍스트가 무엇인지 알아봅시다.
우리가 웹사이트를 볼 때, 알게 모르게 굉장히 많은 웹페이지들을 봅니다. 이 웹페이지들은 하나의 문서로 작성되며, 서로 <a> 태그 등에 의해 다른 웹페이지로 넘어갈 수 있습니다.
이처럼 각각의 웹페이지들(문서)이 서로 하이퍼링크(참조)에 의해 다른 웹페이지로 넘어갈 수 있는 이러한 구조를 가진 문서를 바로 하이퍼 텍스트라고 합니다.
그리고 여담이지만 이러한 하이퍼 텍스트를 화면에 보여줄 수 있도록 태그화하여 표현하는 언어가 바로 HTML, Hyper Text Markup Language 입니다.

이제 웹페이지를 작성할 수도 있고 화면에 출력할 수도 있게 되었습니다. 이제 남은 것은 각 데이터(하이퍼 텍스트)끼리 어떻게 데이터를 주고받냐 입니다.
그것을 정의한 것이 바로 통신규약인 HTTP인 것이죠.

** 구조?
이런 HTTP의 구조에 대해 먼저 살펴봅시다. 우리가 어떻게 요청을 보내는가를 생각하면 쉽게 알 수 있습니다.
스타트 라인
* 요청
- HTTP 메소드, 경로, 버전

* 응답
- 버전, 상태코드


헤더
- Accept나 Content Type 등의 서버에게 필요한 설정 정보를 전달합니다. 추가로 헤더를 넣을 수도 있습니다.


바디
- 요청하는데 필요한 정보들이나, 응답값들을 전달합니다. 흔히 POST로 데이터를 전송하고 서버로부터 데이터를 받을 때 이곳에서 적혀서 요청/응답을 주고받습니다.


** 특징?
1. Request-Response 구조
HTTP는 반드시 요청과 응답을 주고받아야 한다.
이는 일방적으로 클라이언트가 요청하고 서버가 응답하는 방식으로, 서버가 먼저 요청을 한다던가의 일은 일어날 수 없다.

2. 비연결성
- HTTP는 연결을 유지하지 않는다.
클라이언트가 요청하고 서버가 응답하면 연결은 종료된다.

3. 무상태성
- 앞선 비연결성과 연관된다. HTTP는 클라이언트의 상태를 저장하지 않는다.
한번 주고받고 연결이 끊기면 그걸로 끝이다.

** 단점
1. 서버가 요청을 보낼 수 없음
- 서버는 클라이언트에 응답만 할 수 있기 때문에, 서버가 먼저 요청할 수는 없다.

2. 연결 지속이 어렵다
- 위의 비연결성, 무상태성의 단점이다.
클라이언트의 상태를 저장하지 않고 바로 연결을 끊어버리기 때문에, 인증이 불가능하다.
(이런 단점을 보완하기 위해, 세션과 토큰라는 것이 생겨났다)

Domain Name이란 뭐고, DNS는 어떻게 작동하는가?

Hosting 이란?



여기에서 더 들어가자면 네트워크 계층, TCP/IP 같은 개념들이 등장하는데요. 이건 너무 세세한 개념이니 넘어가도록 하겠습니다.


궁금증?

Q1) 왜 자바스크립트 엔진과 렌더링 엔진은 왜 따로 있을까?

A1) HTML/CSS 파싱 도중, 자바스크립트를 만나면 렌더링 엔진은 잠시 멈추고 자바스크립트 엔진이 동작한다.
    그리고 자바스크립트가 파싱이 끝나면 렌더링 엔진이 다시 돌아간다.
    이렇게 되는 이유는 자바스크립트는 별도의 해석기(인터프리터)가 필요하기 때문이다.
    따라서 하나에 엔진에 몰아넣는것이 아닌, 별도로 구축하는 것이 옳다.
