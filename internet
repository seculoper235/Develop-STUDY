인터넷은 어떻게 작동되는가?
- 인터넷이란 개념은 굉장히 넓고 복잡합니다. 때문에 정확히 "이거야!"라고 정의 내리기엔 애매합니다.
무엇으로 정의하더라도 그것보다 더 넓은 개념이 인터넷이기 때문이죠.
그럼에도 두루뭉실하게 정의해보자면, 인터넷이란 사용자들이 서로 소통할 수 있는 공간이라고 할 수 있습니다.
A가 B랑 카톡을 주고받고, C는 쇼핑을 하고 등등 이런 일련의 작업을 할 수 있게 해주는 공간이 바로 인터넷입니다.

그럼 이제 인터넷이 뭔지는 알았는데, 과연 어떻게 통신이 가능할까요?
여러가지 모델이 있겠지만, 그 중 가장 많이 쓰이고 유명한 모델 중 하나가 바로 클라이언트-서버 모델입니다.
이 모델은 말 그대로 단순하게 서버와 클라이언트가 서로 데이터를 주고받으며 통신하는 모델입니다.
하지만 이런 모델은 그냥 짠! 하고 생기는게 아니죠. 컴퓨터 답게 역시 프로그램이 필요합니다.
사용자가 사용할 클라이언트 프로그램과 관리자가 사용할 서버 프로그램, 이 두 프로그램이 작동하며 서로 데이터를 주고받는 것이죠.
이 개념은 사실 모두가 이미 알고있습니다.
게임을 하려고 할 때, 야? 겜 서버 이상해, 렉걸렸나봐!할 때의 서버가 바로 서버 프로그램입니다.
그리고 게임 다운 다 받았어?할 때의 그 게임 프로그램을 클라이언트 프로그램이라고 합니다.

여기서 궁금한 건, 우리는 흔히 네이버, 구글 이런것들을 웹서버라고 부릅니다. 당연히 서버 프로그램이겠죠.
그렇다면 이에 대응하는 클라이언트 프로그램도 있을텐데, 이건 도대체 뭘까요?
그건 우리가 웹을 사용하기 위해 무의식 중에 실행하는 것, 바로 브라우저입니다.


브라우저란 무엇이고, 어떻게 작동하는가?
이제 이 브라우저에 대해 이야기해 볼텐데, 이는 굉장히 복잡하고 폭넓은 지식을 요구합니다.
각 브라우저마다 지니는 렌더링 엔진과 기능도 다르고, 파싱의 원리 등등 파고들면 끝도 없이 많습니다.
하지만 브라우저는 프론트 엔드라면 꼭 알아야 할 기본 지식입니다.
그 이유는 브라우저는 사파리, 파리어폭스, 크롬, IE, 오페라 등 여러개가 있고, 개발자들은 이러한 브라우저를 고려하여 개발해야 하기 때문입니다.
그리고 이런 구조는 자바스크립트의 구동 원리를 이해하기 위해서라도 필요합니다.
그러나 다행히도 모든 브라우저 프로그램은 흐름 그 자체는 동일하게 흘러갑니다.
여기서는 그것에 대해 개략적으로 알아보도록 하겠습니다.

구성 요소에 대해 알아보기 전에 어떤 기능이 필요할지 먼저 생각해봅시다.
우선 통신을 해야하니 통신 부분이 필요할 것이고, 버튼같은 사용자 인터페이스 부분, 화면에 그려주는 부분과, 
브라우저는 크게 User Interface, Browser Engine, Rendering Engine, Networking, JSEngine, UI Backend, Data Storage로 나눠져 있습니다.
이에 대해 간략하게 설명해보자면,

User Interface
- 이 부분은 간단합니다 브라우저에 있는 뒤로가기, 새로고침, 설정 등의 사용자 인터페이스를 의미합니다.

Rendering Engine
- HTML이나 CSS, JS 등의 파일을 읽고 화면에 출력하는 역할을 한다. 각 브라우저마다 다르며, 자바스크립트를 할 때 중요하게 다뤄지는 부분입니다.

Browser Engine
- Rendering Engine이 화면을 그려준다고 해서 그게 화면에 바로 나타날 순 없습니다. User Interface와 연결을 해줘야 제대로 표현될 수 있죠.
바로 그 부분은 담당하는 엔진입니다. 즉, 브라우저 동작에 대한 비즈니스 로직이 담겨있는 핵심 부분이라고 보면 됩니다.

Networking
- 이름 그대로 통신하기 위해 꼭 필요한 구성요소 입니다.
당연히 브라우저도 HTTP 요청을 한다거나 등의 통신이 필요하기 때문입니다.

JS Engine
- 흔히 "메모장에 작성해서 갖다 붙여도 잘 돌아간다"라고 하죠.
- 자바스크립트를 사용할 때, 별도의 인터프리터가 없어도 잘 실행되는 이유가 이 때문입니다.
- 브라우저 자체에 이미 JS 엔진이 있기 때문에 알아서 해석하고 실행됩니다.

UI Backend
- 각 브라우저들은 형태는 다르지만 공통적인 부분(윈도우 창, 최소화, 닫기 등)이 있는데,이런 UI 들의 작동에 대해 서술되어 있습니다.
따라서 플랫폼에 관계없으며, OS(운영체제)와 연관되어 있는 부분입니다.

Data Storage
- 쿠키나 세션 정보, 사용 기록 등의 클라이언트 정보가 담기는 공간입니다.
localStorage, Session Storage 등이 이에 해당합니다.



HTTP 란?
정확히 말하면 순수한 의미론 일방적으론 클라이언트가 요청하고, 서버가 응답하는 방식이죠.

Domain Name이란 뭐고, DNS는 어떻게 작동하는가?

Hosting 이란?



여기에서 더 들어가자면 네트워크 계층, TCP/IP 같은 개념들이 등장하는데요. 이건 너무 세세한 개념이니 넘어가도록 하겠습니다.
